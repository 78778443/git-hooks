#!/bin/bash
# PHP CodeSniffer pre-commit hook for git
#
# @author Soenke Ruempler <soenke@ruempler.eu>
# @author Sebastian Kaspari <s.kaspari@googlemail.com>
#
# see the README

PHPCS_BIN=/usr/bin/phpcs
PHPCS_CODING_STANDARD=PEAR
PHPCS_IGNORE=
OUTPUT=""
PROHIBIT_COMMIT=0

# parse config
CONFIG_FILE=$(dirname $0)/config
if [ -e $CONFIG_FILE ]; then
    . $CONFIG_FILE
fi

# simple check if code sniffer is set up correctly
if [ ! -x $PHPCS_BIN ]; then
    echo "PHP CodeSniffer bin not found or executable -> $PHPCS_BIN"
    exit 1
fi

# stolen from template file
if git rev-parse --verify HEAD
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# this is the magic: 
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
    exit 0
fi

# match files against whitelist
FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | egrep -q "$PHPCS_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
    exit 0
fi

# execute the code sniffer
if [ "$PHPCS_IGNORE" != "" ]; then
    IGNORE="--ignore=$PHPCS_IGNORE"
else
    IGNORE=""
fi

# Run phpcs on staged content of every staged file
for FILE in $FILES_TO_CHECK
do
  ID=`git diff-index --cached HEAD $FILE | cut -d " " -f4`
  git cat-file blob $ID > phpcs.tmp
  PHPCS_OUTPUT=`$PHPCS_BIN -s --standard=$PHPCS_CODING_STANDARD $IGNORE phpcs.tmp`
  RETVAL=$?
  if [ $RETVAL -ne 0 ]; then
    OUTPUT="SRC:  $FILE$PHPCS_OUTPUT\n\n$OUTPUT"
    PROHIBIT_COMMIT="$RETVAL"
  fi
  rm phpcs.tmp
done

if [ $PROHIBIT_COMMIT -ne 0 ]; then
  echo -e "$OUTPUT" | less
fi

exit $PROHIBIT_COMMIT


